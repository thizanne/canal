entering0 = 0, entering1 = 0, entering2 = 0,
number0 = 0, number1 = 0, number2 = 0

#### THREAD 0 ####

entering0 := 1

n0 := number0
n1 := number1
n2 := number2

// number0 = 1 + max(number0, ..., number2);

max01 := n1
if n0 > n1 {
   max01 := n0
}

max012 := n2
if max01 > n2 {
   max012 := max01
}

number0 := max012

entering0 := 0

// Wait until thread 0 receives its number:

e := entering0
while (e = 1) {
    e := entering0
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number0
ni := number0

while nj <> 0 && (nj < ni || nj = ni && 0 < 0) {
    nj := number0
    ni := number0
}

// Wait until thread 1 receives its number:

e := entering1
while (e = 1) {
    e := entering1
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number1
ni := number0

while nj <> 0 && (nj < ni || nj = ni && 1 < 0) {
    nj := number1
    ni := number0
}

// Wait until thread 2 receives its number:

e := entering2
while (e = 1) {
    e := entering2
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number2
ni := number0

while nj <> 0 && (nj < ni || nj = ni && 2 < 0) {
    nj := number2
    ni := number0
}

// Critical section

number0 := 0

#### THREAD 1 ####

entering1 := 1

n0 := number0
n1 := number1
n2 := number2

// number1 = 1 + max(number0, ..., number2);

max01 := n1
if n0 > n1 {
   max01 := n0
}

max012 := n2
if max01 > n2 {
   max012 := max01
}

number1 := max012

entering1 := 0

// Wait until thread 0 receives its number:

e := entering0
while (e = 1) {
    e := entering0
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number0
ni := number1

while nj <> 0 && (nj < ni || nj = ni && 0 < 1) {
    nj := number0
    ni := number1
}

// Wait until thread 1 receives its number:

e := entering1
while (e = 1) {
    e := entering1
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number1
ni := number1

while nj <> 0 && (nj < ni || nj = ni && 1 < 1) {
    nj := number1
    ni := number1
}

// Wait until thread 2 receives its number:

e := entering2
while (e = 1) {
    e := entering2
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number2
ni := number1

while nj <> 0 && (nj < ni || nj = ni && 2 < 1) {
    nj := number2
    ni := number1
}

// Critical section

number1 := 0

#### THREAD 2 ####

entering2 := 1

n0 := number0
n1 := number1
n2 := number2

// number2 = 1 + max(number0, ..., number2);

max01 := n1
if n0 > n1 {
   max01 := n0
}

max012 := n2
if max01 > n2 {
   max012 := max01
}

number2 := max012

entering2 := 0

// Wait until thread 0 receives its number:

e := entering0
while (e = 1) {
    e := entering0
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number0
ni := number2

while nj <> 0 && (nj < ni || nj = ni && 0 < 2) {
    nj := number0
    ni := number2
}

// Wait until thread 1 receives its number:

e := entering1
while (e = 1) {
    e := entering1
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number1
ni := number2

while nj <> 0 && (nj < ni || nj = ni && 1 < 2) {
    nj := number1
    ni := number2
}

// Wait until thread 2 receives its number:

e := entering2
while (e = 1) {
    e := entering2
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj := number2
ni := number2

while nj <> 0 && (nj < ni || nj = ni && 2 < 2) {
    nj := number2
    ni := number2
}

// Critical section

number2 := 0
