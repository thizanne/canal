{ @ (0:critical_section,1:critical_section) false }

int number0, number1;
bool entering0, entering1;

number0 = 0 && number1 = 0 && not entering0 && not entering1

#### THREAD 0 ####

while(true) {
    entering0 := true
    mfence

    // number0 = 1 + max(number0, number1); number0 is 0
    max := number1
    number0 := 1 + max
    mfence

    entering0 := false
    mfence

    // Wait until thread 1 receives its number:
    e := entering1
    while e {
        e := entering1
    }

    // Wait until all threads with smaller numbers or with the same
    // number, but with higher priority, finish their work:

    n1 := number1
    n0 := number0

    // n1 < n0 can be written max >= n1
    while n1 != 0 && n1 < n0 {
        n1 := number1
    }

    label critical_section

    number0 := 0
    mfence
}

#### THREAD 1 ####

while true {
    entering1 := true
    mfence

    // number1 = 1 + max(number0, number1); number1 is 0
    max := number0
    number1 := 1 + max
    mfence

    entering1 := false
    mfence

    // Wait until thread 0 receives its number:
    e := entering0
    while e {
        e := entering0
    }

    // Wait until all threads with smaller numbers or with the same
    // number, but with higher priority, finish their work:

    n0 := number0
    n1 := number1

    while n0 != 0 && n0 <= n1 {
        n0 := number0
    }

    label critical_section

    number1 := 0
     mfence
}
