/* With Mark/Polka, needs 3 steps before widening */

{ @ (0:bp1, 1:bp2) 1:latch1 or 0:latch2 or 1:latch2 or 0:latch1 or latch1 or latch2 }

/* The assertion is that at label (bp1, bp2), latch1 and latch2 cannot
be BOTH false, otherwise the program will enter an infinite loop in
both procs.*/

bool latch1, flag1, latch2, flag2;

latch1 && flag1 && not flag2 && not latch2

##### thread worker_1 #####

while (true) {
    llatch1 = latch1
    while (not llatch1) {
         llatch1 = latch1
         label bp1
    }

    latch1 = false
    // mfence
    lflag1 = flag1
    if (lflag1) {
        flag1 = false
        // mfence
        flag2 = true			// there has to be a store-store barrier here for sure.
        mfence
        latch2 = true
        // mfence
    }
}

##### thread worker_2 #####

while (true) {
    llatch2 = latch2
    while (not llatch2) {
        llatch2 = latch2
        label bp2
    }

    latch2 = false
    // mfence
    lflag2 = flag2
    if (lflag2) {
        flag2 = false
        // mfence
        flag1 = true			// there has to be a store-store barrier here for sure.
        mfence
        latch1 = true
        // mfence
    }
}

/* We probably need more barriers to be correct for this example for
PSO. */

/* I tried this example with integers ranging from 0 to 1 and it did
not seem to work for SC so I used booleans.  A note here is that the
numerical domain adds disjunctions when using booleans.*/
