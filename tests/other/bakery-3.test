{ @ (0:critical_section,1:critical_section) false }

int number0, number1, number2;
bool entering0, entering1, entering2;

not entering0 && not entering1 && not entering2 &&
number0 = 0 && number1 = 0 && number2 = 0

#### THREAD 0 ####

entering0 = true

n0 = number0
n1 = number1
n2 = number2

// number0 = 1 + max(number0, ..., number2);

number0 = 1 + n0 + n1 + n2

entering0 = false

// Wait until thread 1 receives its number:

e = true
while (e) {
    e = entering1
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj = number1
ni = number0

while nj <> 0 && (nj < ni) {
    nj = number1
}

// Wait until thread 2 receives its number:

e = true
while (e) {
    e = entering2
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj = number2

while nj <> 0 && (nj < ni) {
    nj = number2
}

label critical_section

number0 = 0

#### THREAD 1 ####

entering1 = true

n0 = number0
n1 = number1
n2 = number2

// number1 = 1 + max(number0, ..., number2);

number1 = 1 + n0 + n1 + n2

entering1 = false

// Wait until thread 0 receives its number:

e = true
while (e) {
    e = entering0
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj = number0
ni = number1

while nj <> 0 && (nj <= ni) {
    nj = number0
}

// Wait until thread 2 receives its number:

e = true
while (e) {
    e = entering2
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj = number2

while nj <> 0 && (nj < ni) {
    nj = number2
}

label critical_section

number1 = 0

#### THREAD 2 ####

entering2 = true

n0 = number0
n1 = number1
n2 = number2

// number2 = 1 + max(number0, ..., number2);

number2 = 1 + n0 + n1 + n2

entering2 = false

// Wait until thread 0 receives its number:

e = true
while (e) {
    e = entering0
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj = number0
ni = number2

while nj <> 0 && nj <= ni {
    nj = number0
}

// Wait until thread 1 receives its number:

e = true
while (e) {
    e = entering1
}

// Wait until all threads with smaller numbers or with the same
// number, but with higher priority, finish their work:

nj = number1

while nj <> 0 && nj <= ni {
    nj = number1
}

label critical_section

number2 = 0
